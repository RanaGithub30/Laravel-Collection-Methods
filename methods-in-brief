Descriptions of all methods in brief --> 
---------------------------------------------

* 1) all() --> return all the values..
* 2) average()/avg() --> returns the average of all values using key value pair or normally
* 3) chunk() --> returns array value in chunk as per given range.
* 4) collapse() --> Merge all arrays into single one
* 5) combine() --> combine the arrays as per key value pair
6) concat() --> Concatenate multiple arrays/collections into single one.
* 7) contains() --> check the array contains a value or not.
* 8) count() --> count the number of elements of array
* 9) countBy() --> method gives the count of items occurrences of collections.
10) cross-join() --> cross joins the collections values in every possible ways.
* 11) diff(), diffAssoc() --> compares the collection against another collection 
          or a plain PHP array based on values.
12) diffKeys() --> compares the collection against another collection 
          or a plain PHP array based on keys.
* 13) duplicates() --> retrieves and returns duplicate values 
          from the collection
* 14) each() --> takes each element from the collection and applies the callback function on it.
* 15) every() --> The every method may be used to verify that all elements of a collection pass a given truth test.
* 16) except() --> The except method returns all items in the collection except for those with the specified keys.


** 17) filter() --> The filter method filters the collection using the given callback, keeping only those items that pass a given truth test.

//////

* 18) first() --> returns the first element in the collection.  
* 19) firstWhere() --> returns the first element in the collection with the given key / value pair.
20) flatmap() --> To modify the values from collections.
21) flatten() --> convert multi-dimensional collection into a single dimension.
* 22) flip() --> Interchange the keys with value in collection.
* 23) forget() --> The forget method removes an item from the collection by its key.
24) forpage() --> returns a new collection containing the items 
          that would be present on a given page number.
* 25) get() --> The get method returns the item at a given key. If the key does not 
          exist, null is returned.
** 26) groupBy() --> The groupBy method groups the collections items by a given key.
** 27) has() --> The has method determines if a given key exists in the collection.
* 28) implode() --> joins items in collection.
* 29) intersect() --> removes any values from the original collection 
          that are not present in the given array or collection.
30) intersectByKeys() --> removes any keys and their corresponding values from the original collection that are not present in the given array or collection.
* 31) isEmpty() --> check a collection is empty or not.
* 32) isNotEmpty() --> returns true if the collection is not empty.
33) join() --> joins the collections values with a string.
* 34) keys() --> The keys method returns all of the collections keys.
* 35) last() --> returns the last element in the collection that passes a given truth test
* 36) map() --> use callback to modify the items.
** 37) mapToGroups() --> The mapToGroups method groups the collections items by the given closure. 
** 38) max() --> returns the maximum value of a given key.
39) median() -->  returns the median value of a given key.
* 40) merge() --> The merge method merges the given array or collection with the original collection. 
41) mergeRecursive() --> merges the given array or collection recursively with the original collection.
* 42) min() --> The min method returns the minimum value of a given key.
43) mode() --> The mode method returns the mode value of a given key.
** 44) only() --> The only method returns the items in the collection with the specified keys
45) pad() --> fill the array with the given value until the array reaches the specified size.
** 46) pluck() --> The pluck method retrieves all of the values for a given key
** 47) pop() --> The pop method removes and returns the last item from the collection.
** 48) prepend() --> The prepend method adds an item to the beginning of the collection
* 49) pull() --> The pull method removes and returns an item from the collection by its key
** 50) push() --> The push method appends an item to the end of the collection
51) put() --> The put method sets the given key and value in the collection
52) random() --> The random method returns a random item from the collection
53) range() --> returns a collection containing integers between the specified range
* 54) reduce() --> reduces the collection to a single value.
* 55) reject() --> The reject method filters the collection using the given closure.
56) replace() --> The replace method behaves similarly to merge
57) reverse() --> The reverse method reverses the order of the collection's items
** 58) search() --> The search method searches the collection for the given value and returns its key if found.
59) shift() --> The shift method removes and returns the multiple item from the collection
* 60) shuffle() --> The shuffle method randomly shuffles the items in the collection
61) sliding() --> same as chunk()
* 62) skip() --> The skip method returns a new collection, with the given number of elements removed from the beginning of the collection  (** Same as slice())

* 63) skipUntil() --> The skipUntil method skips over items from the collection 
       until the given item found in the collection.
64) skipWhile() --> The skipWhile method skips over items from the collection while 
           the given callback returns true and then returns the remaining 
           items in the collection as a new collection

** 65) slice() --> The slice method returns a slice of the collection starting at the given index

/////////////

** 66) sort() --> The sort method sorts the collection.
** 67) sortedBy() --> The sortBy method sorts the collection by the given key.
* 68) sortDesc() --> This method will sort the collection in the opposite order as the sort method.
69) sortKeys() --> The sortKeys method sorts the collection by the keys of the underlying associative array
* 70) splice() --> The splice method removes and returns a slice of items starting 
         at the specified index.
* 71) split() --> The split method breaks a collection into the given number of groups
* 72) sum() --> The sum method returns the sum of all items in the collection 
** 73) take() --> The take method returns a new collection with the specified number of items
74) takeWhile() --> The takeWhile method returns items in the collection until the given callback returns false
** 75) toArray() --> The toArray method converts the collection into a plain PHP array.
** 76) toJson() --> The toJson method converts the collection into a JSON serialized string
** 77) transform() --> to modify the collections data.
* 78) undot() --> The undot method expands a single-dimensional collection that uses "dot" notation into a multi-dimensional collection
** 79) union() --> The union method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection's values will be preferred 
** 80) unique() --> The unique method returns all of the unique items in the collection.
81) values() --> The values method returns a new collection with the keys reset to consecutive integers
** 82) when() --> execute the given callback when the first argument given to the method evaluates to true
** 83) whenEmpty() --> The whenEmpty method will execute the given callback when the collection is empty
** 84) whenNotEmpty() --> The whenNotEmpty method will execute the given callback when the collection is not empty.
85) where() --> The where method filters the collection by a given key / value pair
86) whereBetween() --> The whereBetween method filters the collection by determining if a specified item value is within a given range  
    // opposite --> whereNotBetween
87) whereNotNull() --> The whereNotNull method returns items from the collection where the given key is not null
88) whereNull() --> The whereNull method returns items from the collection where the given key is null